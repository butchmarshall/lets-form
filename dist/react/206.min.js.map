{"version":3,"file":"206.index.js","mappings":"0rBAOA,IAAMA,EAAoB,SAAHC,GAwBjB,IAvBJC,EAAID,EAAJC,KACAC,EAAKF,EAALE,MACAC,EAAQH,EAARG,SACAC,EAAIJ,EAAJI,KACAC,EAAKL,EAALK,MACAC,EAAQN,EAARM,SACAC,EAAMP,EAANO,OACAC,EAAKR,EAALQ,MACAC,EAAST,EAATS,UACAC,EAAQV,EAARU,SACAC,EAAQX,EAARW,SACAC,EAAQZ,EAARY,SAAQC,EAAAb,EACRc,cAAAA,OAAa,IAAAD,GAAQA,EAErBE,GADIf,EAAJgB,KACKhB,EAALe,OACAE,EAASjB,EAATiB,UACAC,EAAWlB,EAAXkB,YACAC,EAAYnB,EAAZmB,aACAC,EAASpB,EAAToB,UACAC,EAASrB,EAATqB,UACSC,GAAAtB,EAATuB,UAASvB,EACTwB,WAAAA,OAAS,IAAAF,EAAG,WAAO,EAACA,EACjBG,E,kXAAIC,CAAA1B,EAAA2B,GAEDC,EAAWpB,GAASqB,IAAWrB,GAC/BsB,GAAcC,EAAAA,EAAAA,cAAY,SAAAC,GAAC,OAAkB,KAAdA,EAAEC,SAAkBT,GAAW,GAAE,CAACA,IAEvE,OACEU,IAAAA,cAAA,OACEzB,UAAW0B,IAAW1B,EAAW,+BACjC,qBAAoBR,GAEpBiC,IAAAA,cAAA,SAAOE,IAAKnC,GACTC,EACAU,GAAYsB,IAAAA,cAACG,EAAAA,EAAY,OAE1BH,IAAAA,cAAA,QAAAI,EAAA,CACEC,KAAMnB,EACNoB,KAAMrC,EACNsC,GAAIxC,EACJyC,aAAcrC,EACdC,SAAUA,EACVC,OAAQA,EACRoC,QAAS7B,EAAgBgB,OAAcc,EACvC1B,YAAaA,EACb2B,OAAOC,EAAAA,EAAAA,IAAe7B,EAAWF,GACjCgC,aAAc5B,EACdE,UAAWA,EACXX,SAAUA,EACVC,SAAUA,IACNqC,EAAAA,EAAAA,IAASvB,KAEdrB,IAASwB,GAAYM,IAAAA,cAAA,OAAKzB,UAAU,yBAAyBL,GAC7DwB,GAAYM,IAAAA,cAAA,OAAKzB,UAAU,+BAA+BD,GAGnE,C,uDChEA,IAAMyC,EAAQ,SAAAC,GAAC,OAAIC,QAAQC,IAAI,UAAYF,EAAG,wEAAyE,GAAG,C,4WCO1H,IAEMG,GAAcC,EAAAA,EAAAA,KAClB,SAAAtD,GAMM,IALJM,EAAQN,EAARM,SACAiD,EAAGvD,EAAHuD,IACAC,EAAGxD,EAAHwD,IACAC,EAAIzD,EAAJyD,KACGhC,E,kXAAIC,CAAA1B,EAAA2B,GAED+B,GAAe3B,EAAAA,EAAAA,cACnB,SAAAC,GACE,IACI2B,EAbQC,EAYNvD,EAAQ2B,EAAE6B,OAAOxD,MAEnBwB,IAAWxB,KACC,KAAVA,EAEFsD,EAAS,MAjBDC,EAkBavD,EACrBsD,EAnBa9B,IAAW+B,KAAOA,EAAEE,SAAS,MAAQF,EAAEE,SAAS,MAmBpDC,WAAW1D,GAEX2D,SAAS3D,EAAO,KAEtB4D,MAAMN,IACTrD,EAASqD,GAGf,GACA,CAACrD,IAGH,OACE4B,IAAAA,cAACnC,EAAAA,EAAiBuC,EAAA,CAChBlB,UAAU,SACVG,UAAU,eACVd,UAAU,0BACV8C,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNnD,SAAUoD,GACNjC,GAGV,GACA,CAAC,QAAS,OAAQ,iBAEpBwB,EAAAA,EAAAA,GAAM,4BAEN,W","sources":["webpack:///./components/react-generic-input/index.js","webpack:///./helpers/lf-log.js","webpack:///./react/input-number/index.js"],"sourcesContent":["import React, { useCallback } from 'react';\nimport _ from 'lodash';\nimport classNames from 'classnames';\n\nimport { RequiredIcon } from '../required-icon';\nimport { makeWidthStyle, passRest } from '../../helpers';\n\nconst ReactGenericInput = ({\n  name,\n  label,\n  lfLocale,\n  hint,\n  value,\n  onChange,\n  onBlur,\n  error,\n  className,\n  disabled,\n  readOnly,\n  required,\n  submitOnEnter = false,\n  size,\n  width,\n  fullWidth,\n  placeholder,\n  autocomplete,\n  inputType,\n  inputMode,\n  component,\n  lfOnEnter = () => {},\n  ...rest\n}) => {\n  const hasError = error && _.isString(error);\n  const handleKeyUp = useCallback(e => e.keyCode === 13 && lfOnEnter(), [lfOnEnter]);\n\n  return (\n    <div\n      className={classNames(className, 'lf-form-react-control-group')}\n      data-lf-field-name={name}\n    >\n      <label for={name}>\n        {label}\n        {required && <RequiredIcon />}\n      </label>\n        <input\n          type={inputType}\n          lang={lfLocale}\n          id={name}\n          defaultValue={value}\n          onChange={onChange}\n          onBlur={onBlur}\n          onKeyUp={submitOnEnter ? handleKeyUp : undefined}\n          placeholder={placeholder}\n          style={makeWidthStyle(fullWidth, width)}\n          autoComplete={autocomplete}\n          inputMode={inputMode}\n          disabled={disabled}\n          readOnly={readOnly}\n          {...passRest(rest)}\n        />\n        {hint && !hasError && <div className=\"lf-form-react-message\">{hint}</div>}\n        {hasError && <div className=\"lf-form-react-error-message\">{error}</div>}\n    </div>\n  );\n};\n\nexport { ReactGenericInput };\n","const lfLog = s => console.log('%cLF%c ' + s, 'background: #3498ff; color: #ffffff; padding: 2px; border-radius: 3px', '');\n\nexport { lfLog };","import React, { useCallback } from 'react';\nimport _ from 'lodash';\n\nimport { I18N } from '../../components';\nimport { ReactGenericInput } from '../../components/react-generic-input';\nimport { lfLog } from '../../helpers/lf-log';\n\nconst hasDecimals = f => _.isString(f) && (f.includes(',') || f.includes('.'));\n\nconst InputNumber = I18N(\n  ({ \n    onChange,\n    min,\n    max,\n    step, \n    ...rest\n  }) => {\n    const handleChange = useCallback(\n      e => {\n        const value = e.target.value;\n        let parsed;\n        if (_.isString(value)) {\n          if (value === '') {\n            // void if the user deleted all chars\n            parsed = null;\n          } else if (hasDecimals(value)) {\n            parsed = parseFloat(value);\n          } else {\n            parsed = parseInt(value, 10);\n          }\n          if (!isNaN(parsed)) {\n            onChange(parsed);\n          }\n        }\n      },\n      [onChange]\n    );\n\n    return (\n      <ReactGenericInput\n        inputType=\"number\"\n        component=\"input-number\"\n        className=\"lf-control-input-number\"\n        min={min}\n        max={max}\n        step={step}\n        onChange={handleChange}\n        {...rest}\n      />\n    );\n  },\n  ['label', 'hint', 'placeholder']\n);\nlfLog('Loaded React.InputNumber');\n\nexport default InputNumber;"],"names":["ReactGenericInput","_ref","name","label","lfLocale","hint","value","onChange","onBlur","error","className","disabled","readOnly","required","_ref$submitOnEnter","submitOnEnter","width","size","fullWidth","placeholder","autocomplete","inputType","inputMode","_ref$lfOnEnter","component","lfOnEnter","rest","_objectWithoutProperties","_excluded","hasError","_isString","handleKeyUp","useCallback","e","keyCode","React","classNames","for","RequiredIcon","_extends","type","lang","id","defaultValue","onKeyUp","undefined","style","makeWidthStyle","autoComplete","passRest","lfLog","s","console","log","InputNumber","I18N","min","max","step","handleChange","parsed","f","target","includes","parseFloat","parseInt","isNaN"],"sourceRoot":""}