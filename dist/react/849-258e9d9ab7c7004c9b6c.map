{"version":3,"file":"849-258e9d9ab7c7004c9b6c.js","mappings":"uJAAA,IAAMA,EAAQ,SAAAC,GAAC,OAAIC,QAAQC,IAAI,UAAYF,EAAG,wEAAyE,GAAG,C,2cCO1H,IAAMG,GAAWC,EAAAA,EAAAA,KACf,SAAAC,GAgBM,IAfJC,EAAID,EAAJC,KACAC,EAAKF,EAALE,MACAC,EAAIH,EAAJG,KACAC,EAAKJ,EAALI,MACAC,EAAQL,EAARK,SACAC,EAAMN,EAANM,OACAC,EAAKP,EAALO,MACAC,EAAQR,EAARQ,SACAC,EAAQT,EAARS,SACAC,EAAQV,EAARU,SACAC,EAAIX,EAAJW,KACAC,EAAIZ,EAAJY,KACAC,EAAKb,EAALa,MACAC,EAASd,EAATc,UACGC,E,kXAAIC,CAAAhB,EAAAiB,GAEDC,EAAWX,GAASY,IAAWZ,GAC/Ba,GAAeC,EAAAA,EAAAA,cACnB,SAAAC,GAAC,OAAIjB,EAASiB,EAAEC,OAAOnB,MAAM,GAC7B,CAACC,IAGH,OACEmB,IAAAA,cAAA,OACEC,UAAU,kDACV,qBAAoBxB,GAEpBuB,IAAAA,cAAA,SAAOE,IAAKzB,GACTC,EACAQ,GAAYc,IAAAA,cAACG,EAAAA,GAAY,OAE5BH,IAAAA,cAAA,WAAAI,EAAA,CACEC,KAAK,OACLC,GAAI7B,EACJW,KAAMA,EACNP,SAAUe,EACVd,OAAQA,EACRmB,UAAWd,GAAQ,uBAAJoB,OAA2BpB,GAC1CqB,OAAOC,EAAAA,EAAAA,IAAenB,EAAWD,GACjCH,SAAmB,MAATH,EACVC,SAAUA,EACVC,SAAUA,IACNyB,EAAAA,EAAAA,IAASnB,IACbX,GACDD,IAASe,GAAYM,IAAAA,cAAA,OAAKC,UAAU,yBAAyBtB,GAC7De,GAAYM,IAAAA,cAAA,OAAKC,UAAU,+BAA+BlB,GAGjE,GACA,CAAC,QAAS,OAAQ,iBAEpBb,EAAAA,EAAAA,GAAM,yBAEN,W","sources":["webpack:///./helpers/lf-log.js","webpack:///./react/textarea/index.js"],"sourcesContent":["const lfLog = s => console.log('%cLF%c ' + s, 'background: #3498ff; color: #ffffff; padding: 2px; border-radius: 3px', '');\n\nexport { lfLog };","import React, { useCallback } from 'react';\nimport _ from 'lodash';\n\nimport { RequiredIcon, I18N } from '../../components';\nimport { passRest, makeWidthStyle } from '../../helpers';\nimport { lfLog } from '../../helpers/lf-log';\n\nconst Textarea = I18N(\n  ({\n    name,\n    label,\n    hint,\n    value,\n    onChange,\n    onBlur,\n    error,\n    disabled,\n    readOnly,\n    required,\n    size,\n    rows,\n    width,\n    fullWidth,\n    ...rest\n  }) => {\n    const hasError = error && _.isString(error);\n    const handleChange = useCallback(\n      e => onChange(e.target.value),\n      [onChange]\n    );\n\n    return (\n      <div\n        className=\"lf-control-textarea lf-form-react-control-group\"\n        data-lf-field-name={name}\n      >\n        <label for={name}>\n          {label}\n          {required && <RequiredIcon />}\n        </label>\n        <textarea\n          type=\"text\"\n          id={name}\n          rows={rows}\n          onChange={handleChange}\n          onBlur={onBlur}\n          className={size && `lf-form-react-input-${size}`}\n          style={makeWidthStyle(fullWidth, width)}\n          required={error != null}\n          disabled={disabled}\n          readOnly={readOnly}\n          {...passRest(rest)}\n        >{value}</textarea>\n        {hint && !hasError && <div className=\"lf-form-react-message\">{hint}</div>}\n        {hasError && <div className=\"lf-form-react-error-message\">{error}</div>}\n      </div>\n    );\n  },\n  ['label', 'hint', 'placeholder']\n);\nlfLog('Loaded React.Textarea');\n\nexport default Textarea;\n"],"names":["lfLog","s","console","log","Textarea","I18N","_ref","name","label","hint","value","onChange","onBlur","error","disabled","readOnly","required","size","rows","width","fullWidth","rest","_objectWithoutProperties","_excluded","hasError","_isString","handleChange","useCallback","e","target","React","className","for","RequiredIcon","_extends","type","id","concat","style","makeWidthStyle","passRest"],"sourceRoot":""}