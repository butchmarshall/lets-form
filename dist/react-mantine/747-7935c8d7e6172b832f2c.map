{"version":3,"file":"747-7935c8d7e6172b832f2c.js","mappings":"igCAQA,IAAMA,GAAgBC,EAAAA,EAAAA,KACpB,SAAAC,GAqBM,I,IApBJC,EAAID,EAAJC,KACAC,EAAKF,EAALE,MACAC,EAAIH,EAAJG,KACAC,EAAKJ,EAALI,MAGeC,GAFJL,EAAXM,YACSN,EAATO,UAASP,EACTQ,QAAeR,EACfS,UAAAA,OAAQ,IAAAJ,GAAQA,EAAAK,EAAAV,EAChBW,SAAAA,OAAQ,IAAAD,GAAQA,EAAAE,EAAAZ,EAChBa,SAAAA,OAAQ,IAAAD,GAAQA,EAChBE,EAAKd,EAALc,MACAC,EAAQf,EAARe,SAEAC,GADMhB,EAANiB,OACIjB,EAAJgB,MACAE,EAAMlB,EAANkB,OACAC,EAAKnB,EAALmB,MACAC,EAASpB,EAAToB,UACAC,EAAarB,EAAbqB,cAAaC,EAAAtB,EACbuB,QAAAA,OAAO,IAAAD,EAAG,GAAEA,EACTE,E,kXAAIC,CAAAzB,EAAA0B,GAKNC,G,GAH+BC,EAAAA,EAAAA,UAC9BC,IAAUzB,GACRA,EAASA,EAAQ0B,SAASC,MAAM,KAAO,I,EAC1C,E,unBAHMC,EAAQL,EAAA,GAAEM,EAAWN,EAAA,GAItBO,GAAeC,EAAAA,EAAAA,cACnB,SAACC,GACC,IAAIC,EAEFA,EADED,EAAEE,OAAOC,QACA,GAAHC,O,yWAAAC,CAAOT,GAAQ,CAAEI,EAAEE,OAAOlC,QAEvB4B,EAASU,QAAO,SAAAtC,GAAK,OAAIA,IAAUgC,EAAEE,OAAOlC,KAAK,IAE9D6B,EAAYI,GACZtB,EAASsB,EACX,GACA,CAACtB,IAGH,OACE4B,IAAAA,cAAA,OAAK,qBAAoB1C,EAAM2C,UAAU,6BACtC1C,GAASyC,IAAAA,cAACE,EAAAA,MAAAA,MAAW,CAAChC,SAAUA,GAAWX,GAC5CyC,IAAAA,cAACG,EAAAA,MAAK,CAACC,IAAI,KAAKC,MAAO,CAAEC,UAAW,6BAA8BC,aAAc,gCAC5E3B,QAAAA,EAAW,IAAI4B,KAAI,SAAAC,GAAI,OACvBT,IAAAA,cAACU,EAAAA,SAAQC,EAAA,CACPC,IAAKH,EAAKhD,MACVA,MAAOgD,EAAKhD,MACZF,MAAOkD,EAAKlD,MACZO,SAAUA,EACVE,SAAUA,EACVI,SAAUmB,EACVK,QAASP,EAASwB,SAASJ,EAAKhD,OAChCqD,YAAaL,EAAKK,YAClBzC,KAAMA,EACNE,OAAQA,EACRC,MAAOA,EACPC,UAAWA,EACXC,cAAeA,IACXqC,EAAAA,EAAAA,IAASlC,EAAM,CAAC,iBAEnBtB,EACQ,KAGdC,GAAQwC,IAAAA,cAACE,EAAAA,MAAAA,YAAiB,KAAE1C,GAC5BW,GAAS6B,IAAAA,cAACE,EAAAA,MAAAA,MAAW,KAAE/B,GAG9B,GACA,CAAC,QAAS,OAAQ,eAClB,CACES,QAASoC,EAAAA,MAGbC,EAAAA,EAAAA,GAAM,gCAEN,W","sources":["webpack:///./react-mantine/checkbox-group/index.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { Checkbox, Stack, Input } from '@mantine/core';\nimport _ from 'lodash';\n\nimport { I18N } from '../../components';\nimport { i18nOptions, passRest } from '../../helpers';\nimport { lfLog } from '../../helpers/lf-log';\n\nconst CheckboxGroup = I18N(\n  ({\n    name,\n    label,\n    hint,\n    value,\n    placeholder,\n    plaintext,\n    tooltip = false,\n    disabled = false,\n    readOnly = false,\n    required = false,\n    error,\n    onChange,\n    onBlur,\n    size,\n    radius,\n    color,\n    iconColor,\n    labelPosition,\n    options = [],\n    ...rest\n  }) => {\n    const [selected, setSelected] = useState(\n      _.isArray(value) ? \n        value : (value ? String().split(',') : [])\n    )\n    const handleChange = useCallback(\n      (e) => {\n        let newValue; \n        if (e.target.checked) {\n          newValue = [...selected, e.target.value];\n        } else {\n          newValue = selected.filter(value => value !== e.target.value);\n        }\n        setSelected(newValue);\n        onChange(newValue);\n      },\n      [onChange]\n    );\n\n    return (\n      <div data-lf-field-name={name} className=\"lf-control-checkbox-group\">\n        {label && <Input.Label required={required}>{label}</Input.Label>}\n        <Stack gap=\"xs\" style={{ marginTop: 'var(--lf-field-margin-top)', marginBottom: 'var(--lf-field-margin-top)'}}>\n          {(options ?? []).map(item => (\n            <Checkbox\n              key={item.value}\n              value={item.value}\n              label={item.label}\n              disabled={disabled}\n              readOnly={readOnly}\n              onChange={handleChange}\n              checked={selected.includes(item.value)}\n              description={item.description}\n              size={size}\n              radius={radius}\n              color={color}\n              iconColor={iconColor}\n              labelPosition={labelPosition}\n              {...passRest(rest, ['description'])}\n            >\n              {label}\n            </Checkbox>\n          ))}\n        </Stack>\n        {hint && <Input.Description>{hint}</Input.Description>}\n        {error && <Input.Error>{error}</Input.Error>}\n      </div>\n    );\n  },\n  ['label', 'hint', 'placeholder'],\n  {\n    options: i18nOptions\n  }\n);\nlfLog('Loaded Mantine.CheckboxGroup');\n\nexport default CheckboxGroup;\n"],"names":["CheckboxGroup","I18N","_ref","name","label","hint","value","_ref$disabled","placeholder","plaintext","tooltip","disabled","_ref$readOnly","readOnly","_ref$required","required","error","onChange","size","onBlur","radius","color","iconColor","labelPosition","_ref$options","options","rest","_objectWithoutProperties","_excluded","_useState2","useState","_isArray","String","split","selected","setSelected","handleChange","useCallback","e","newValue","target","checked","concat","_toConsumableArray","filter","React","className","Input","Stack","gap","style","marginTop","marginBottom","map","item","Checkbox","_extends","key","includes","description","passRest","i18nOptions","lfLog"],"sourceRoot":""}