{"version":3,"file":"127-9c04b48fa3d881209647.js","mappings":"0iBAMA,IAAMA,EAAU,SAAAC,GACd,GAAIC,IAASD,GACX,OAAOA,EACF,GAAIE,IAAWF,GAAQ,CAC5B,IAAMG,EAAI,IAAIC,KAAKJ,GACnB,IAAIK,EAAAA,EAAAA,IAAYF,GACd,OAAOA,CAEX,CAEF,EAEMG,EAAqB,SAAHC,GAWlB,IAVJC,EAAID,EAAJC,KACAC,EAAOF,EAAPE,QACAC,EAAOH,EAAPG,QACAC,EAAKJ,EAALI,MAEAC,GADML,EAANM,OACSN,EAATK,WACAE,EAAKP,EAALO,MACAC,EAAQR,EAARQ,SAAQC,EAAAT,EACRU,SAAAA,OAAQ,IAAAD,GAAQA,EACbE,E,kXAAIC,CAAAZ,EAAAa,GAEDC,EAAYJ,EAAWK,EAAAA,eAAiBC,EAAAA,gBAC9C,OACEC,IAAAA,cAACH,EAASI,EAAA,CACRC,UAAU,kBACV,qBAAoBC,KACpBC,OAAOC,EAAAA,EAAAA,IAAejB,EAAWE,GACjCgB,YAAatB,EACbG,MAAOT,IAAWS,GAASA,OAAQoB,EACnCC,kBAAmB,CAAC,QAAS,QAAS,cAAe,SACrDC,OAAQlB,EACRN,QAASV,EAAQU,GACjBC,QAASX,EAAQW,KACbwB,EAAAA,EAAAA,IAAShB,IAGnB,C,4fCpCA,IAAMiB,GAAaC,EAAAA,EAAAA,IACjB,SAAA7B,GAKM,IAEA8B,EANJC,EAAQ/B,EAAR+B,SACAtC,EAAKO,EAALP,MACAe,EAAQR,EAARQ,SACGG,E,kXAAIC,CAAAZ,EAAAa,GAIP,GAAsB,UAAlBF,EAAKqB,SACPF,EAAe,CAAC,KAAM,WAEtB,GAAIpC,IAASD,GACXqC,EAAerC,OACV,GAAIE,IAAWF,GAAQ,CAC5B,IAAMG,EAAI,IAAIC,KAAKJ,IACfK,EAAAA,EAAAA,GAAYF,KACdkC,EAAelC,EAEnB,CAEF,I,IAA8DqC,G,GAAtBC,EAAAA,EAAAA,UAASJ,G,EAAa,E,k5BAAvDK,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAG9BI,GAAeC,EAAAA,EAAAA,cACnB,SAAA1C,IACME,EAAAA,EAAAA,GAAYF,IACdwC,EAAgBxC,GAChBmC,EAASnC,EAAE2C,cAAcC,MAAM,KAAK,MAEpCJ,EAAgB,MAChBL,EAAS,MAEb,GACA,CAACA,IAGH,OACEd,IAAAA,cAAClB,EAAAA,EAAkBmB,EAAA,CACjBzB,MAAO0C,EACPJ,SAAUM,EACV7B,SAAUA,IACNmB,EAAAA,EAAAA,GAAShB,IAGnB,GACA,CAAC,QAAS,OAAQ,iBAEpB8B,EAAAA,EAAAA,GAAM,6BAEN,W","sources":["webpack:///./components/mantine-generic-date/index.js","webpack:///./react-mantine/date/index.js"],"sourcesContent":["import React from 'react';\nimport { DatePickerInput, DateTimePicker } from '@mantine/dates';\nimport _ from 'lodash';\n\nimport { passRest, makeWidthStyle, isValidDate } from '../../helpers';\n\nconst tryDate = value => {\n  if (_.isDate(value)) {\n    return value;\n  } else if (_.isString(value)) {\n    const d = new Date(value);\n    if (isValidDate(d)) {\n      return d;\n    }\n  }\n  return undefined;\n};\n\nconst MantineGenericDate = ({\n  hint,\n  minDate,\n  maxDate,\n  error,\n  onBlur,\n  fullWidth,\n  width,\n  lfLocale,\n  withTime = false,\n  ...rest\n}) => {\n  const Component = withTime ? DateTimePicker : DatePickerInput;\n  return (      \n    <Component \n      className=\"lf-control-date\"\n      data-lf-field-name={name}\n      style={makeWidthStyle(fullWidth, width)} \n      description={hint} \n      error={_.isString(error) ? error : undefined }\n      inputWrapperOrder={['label', 'input', 'description', 'error']}\n      locale={lfLocale}\n      minDate={tryDate(minDate)}\n      maxDate={tryDate(maxDate)}\n      {...passRest(rest)}\n    />\n  ); \n}\n\nexport { MantineGenericDate };\n","import React, { useCallback, useState } from 'react';\nimport _ from 'lodash';\n\nimport { I18N } from '../../components/i18n';\nimport { MantineGenericDate } from '../../components/mantine-generic-date';\nimport { passRest } from '../../helpers/pass-rest';\nimport { lfLog } from '../../helpers/lf-log';\nimport { isValidDate } from '../../helpers/is-valid-date';\n\nconst SelectDate = I18N(\n  ({\n    onChange,\n    value,\n    lfLocale,\n    ...rest\n  }) => {\n    // also accepts string dates\n    let initialValue;\n    if (rest.dateType === 'range') {\n      initialValue = [null, null]\n    } else {\n      if (_.isDate(value)) {\n        initialValue = value;\n      } else if (_.isString(value)) {\n        const d = new Date(value);\n        if (isValidDate(d)) {\n          initialValue = d;\n        }\n      }\n    }\n    const [currentValue, setCurrentValue] = useState(initialValue);\n    \n    // send always date string in format yyyy-mm-dd\n    const handleChange = useCallback(\n      d => {\n        if (isValidDate(d)) {\n          setCurrentValue(d);\n          onChange(d.toISOString().split('T')[0]);\n        } else {\n          setCurrentValue(null);\n          onChange(null);\n        }\n      },\n      [onChange]\n    );\n\n    return (\n      <MantineGenericDate\n        value={currentValue}\n        onChange={handleChange}\n        lfLocale={lfLocale}\n        {...passRest(rest)}\n      />\n    )\n  },\n  ['label', 'hint', 'placeholder']\n);\nlfLog('Loaded Mantine.SelectDate');\n\nexport default SelectDate;\n"],"names":["tryDate","value","_isDate","_isString","d","Date","isValidDate","MantineGenericDate","_ref","hint","minDate","maxDate","error","fullWidth","onBlur","width","lfLocale","_ref$withTime","withTime","rest","_objectWithoutProperties","_excluded","Component","DateTimePicker","DatePickerInput","React","_extends","className","name","style","makeWidthStyle","description","undefined","inputWrapperOrder","locale","passRest","SelectDate","I18N","initialValue","onChange","dateType","_useState2","useState","currentValue","setCurrentValue","handleChange","useCallback","toISOString","split","lfLog"],"sourceRoot":""}