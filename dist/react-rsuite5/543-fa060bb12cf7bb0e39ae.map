{"version":3,"file":"543-fa060bb12cf7bb0e39ae.js","mappings":"gQACA,ECG+B,gBAAiB,SAAUA,EAAOC,GAC/D,IAAIC,EAAYF,EAAMG,GAClBC,OAAwB,IAAdF,EAAuBG,EAAA,EAAWH,EAChD,OAAoB,kBAAoBI,EAAA,GAAO,OAAS,CAAC,EAAGN,EAAO,CACjEG,GAAIC,EACJH,IAAKA,IAET,I,sdCAA,IAuBMM,GAAYC,EAAAA,EAAAA,KAChB,SAAAC,GAsBM,IA9CYC,EAyBhBC,EAAIF,EAAJE,KACAC,EAAKH,EAALG,MACAC,EAAIJ,EAAJI,KACAC,EAAKL,EAALK,MACAC,EAAIN,EAAJM,KACAC,EAAWP,EAAXO,YAAWC,EAAAR,EACXS,QAAAA,OAAO,IAAAD,GAAQA,EAAAE,EAAAV,EACfW,SAAAA,OAAQ,IAAAD,GAAQA,EAAAE,EAAAZ,EAChBa,SAAAA,OAAQ,IAAAD,GAAQA,EAAAE,EAAAd,EAChBe,SAAAA,OAAQ,IAAAD,GAAQA,EAChBE,EAAKhB,EAALgB,MACAC,EAAMjB,EAANiB,OACAC,EAAOlB,EAAPkB,QACAC,EAAQnB,EAARmB,SACAC,EAAMpB,EAANoB,OAAMC,EAAArB,EACNsB,gBAAAA,OAAe,IAAAD,EAAG,IAAGA,EAAAE,EAAAvB,EACrBwB,KAAAA,OAAI,IAAAD,EAAG,GAAEA,EAAAE,EAAAzB,EACT0B,OAAAA,OAAM,IAAAD,GAAQA,EACdE,EAAS3B,EAAT2B,UACAC,EAAK5B,EAAL4B,MACGC,E,kXAAIC,CAAA9B,EAAA+B,GAEDC,EA9CW,iBADD/B,EA+CeuB,IA9Ca,IAAfvB,EAAIgC,OAC1B,GAGOhC,EAAIiC,MAAM,8BAGvBC,KAAI,SAAAC,GACH,MAAc,SAAVA,EACK,KACY,SAAVA,EACF,KACY,SAAVA,EACF,WACY,SAAVA,EACF,cAGFA,CACT,IA6BMC,EACJC,IAAAA,cAACC,EAAAA,EAAAA,QAAYC,EAAA,CACXtC,KAAMA,EACNuC,SAAUC,EACVrC,MAAOA,EAEPc,SAAUA,EACVC,OAAQA,EACRT,SAAUA,EACVL,KAAMA,EACNC,YAAaA,EACbM,SAAUA,EACVS,gBAA4C,iBAApBA,GAAgCA,EAAgBW,OAAS,EAAIX,EAAgB,GAAK,IAC1GqB,aAAcC,IAAW5B,GAASA,OAAQ6B,EAC1CrB,KAAMQ,IACFc,EAAAA,EAAAA,IAASjB,KAIXkB,EAAa7B,GAAWD,EAE9B,OACEqB,IAAAA,cAACC,EAAAA,EAAAA,MAAU,CACT,qBAAoBrC,EACpB8C,UAAU,wBACVC,OAAOC,EAAAA,EAAAA,IAAevB,EAAWC,IAEhCzB,GAASmC,IAAAA,cAACC,EAAAA,EAAAA,aAAiB,KACzBpC,EACAC,GAAQK,GAAW6B,IAAAA,cAACC,EAAAA,EAAAA,SAAa,CAAC9B,SAAO,GAAEL,GAC3CW,GAAYuB,IAAAA,cAACa,EAAAA,GAAY,QAE1BJ,GAAcV,EACfU,GACCT,IAAAA,cAACc,EAAAA,EAAU,CAAC1B,OAAQA,GACjBT,GAAUqB,IAAAA,cAACc,EAAAA,EAAAA,MAAgB,KAAEnC,GAC7BoB,EACAnB,GAAWoB,IAAAA,cAACc,EAAAA,EAAAA,MAAgB,KAAElC,IAGlCd,IAASK,GAAW6B,IAAAA,cAACC,EAAAA,EAAAA,SAAa,KAAEnC,GAG3C,GACA,CAAC,QAAS,OAAQ,iBAEpBiD,EAAAA,EAAAA,GAAM,4BAEN,O,uCC3GA,IAAe,EAAU,C","sources":["webpack:///../../../../node_modules/rsuite/esm/MaskedInput/index.js","webpack:///../../../../node_modules/rsuite/esm/MaskedInput/MaskedInput.js","webpack:///./react-rsuite5/input-mask/index.js","webpack:///../../../../node_modules/rsuite/esm/InputGroup/index.js"],"sourcesContent":["import MaskedInput from './MaskedInput';\nexport default MaskedInput;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport TextMask from './TextMask';\nimport Input from '../Input';\nvar MaskedInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      inputAs = _props$as === void 0 ? TextMask : _props$as;\n  return /*#__PURE__*/React.createElement(Input, _extends({}, props, {\n    as: inputAs,\n    ref: ref\n  }));\n});\nexport default MaskedInput;","/* eslint-disable no-template-curly-in-string */\nimport React from 'react';\nimport Form from 'rsuite/Form';\nimport MaskedInput from 'rsuite/MaskedInput';\nimport InputGroup from 'rsuite/InputGroup';\nimport _ from 'lodash';\n\nimport { RequiredIcon, I18N } from '../../components';\nimport { passRest, makeWidthStyle } from '../../helpers';\nimport { lfLog } from '../../helpers/lf-log';\n\nconst prepareMask = str => {\n  if (typeof str !== 'string' || str.length === 0) {\n    return [];\n  }\n\n  const matches = str.match(/\\$\\{[a-zA-Z0-9]\\}|.{1,1}/gm);\n\n  return matches\n    .map(token => {\n      if (token === '${d}') {\n        return /\\d/;\n      } else if (token === '${D}') {\n        return /\\D/;\n      } else if (token === '${a}') {\n        return /[a-zA-Z]/;\n      } else if (token === '${w}') {\n        return /[a-zA-Z0-9]/;\n      }\n\n      return token;\n    });\n};\n\nconst InputMask = I18N(\n  ({\n    name,\n    label,\n    hint,\n    value,\n    size,\n    placeholder,\n    tooltip = false,\n    disabled = false,\n    readOnly = false,\n    required = false,\n    error,\n    prefix,\n    postfix,\n    onChange,\n    onBlur,\n    placeholderChar = '_',\n    mask = [],\n    inside = false,\n    fullWidth,\n    width,\n    ...rest\n  }) => {\n    const parsedMask = prepareMask(mask);\n\n    const inner = (\n      <Form.Control\n        name={name}\n        accepter={MaskedInput}\n        value={value}\n\n        onChange={onChange}\n        onBlur={onBlur}\n        disabled={disabled}\n        size={size}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        placeholderChar={typeof placeholderChar === 'string' && placeholderChar.length > 0 ? placeholderChar[0] : '_'}\n        errorMessage={_.isString(error) ? error : undefined }\n        mask={parsedMask}\n        {...passRest(rest)}\n      />\n    );\n\n    const needsGroup = postfix || prefix;\n\n    return (\n      <Form.Group \n        data-lf-field-name={name} \n        className=\"lf-control-input-mask\"\n        style={makeWidthStyle(fullWidth, width)}\n      >\n        {label && <Form.ControlLabel>\n          {label}\n          {hint && tooltip && <Form.HelpText tooltip>{hint}</Form.HelpText>}\n          {required && <RequiredIcon />}\n        </Form.ControlLabel>}\n        {!needsGroup && inner}\n        {needsGroup && (\n          <InputGroup inside={inside}>\n            {prefix && <InputGroup.Addon>{prefix}</InputGroup.Addon>}\n            {inner}\n            {postfix && <InputGroup.Addon>{postfix}</InputGroup.Addon>}\n          </InputGroup>\n        )}\n        {hint && !tooltip && <Form.HelpText>{hint}</Form.HelpText>}\n      </Form.Group>\n    );\n  },\n  ['label', 'hint', 'placeholder']\n);\nlfLog('Loaded RSuite5.InputMask');\n\nexport default InputMask;\n","import InputGroup from './InputGroup';\nexport default InputGroup;"],"names":["props","ref","_props$as","as","inputAs","TextMask","Input","InputMask","I18N","_ref","str","name","label","hint","value","size","placeholder","_ref$tooltip","tooltip","_ref$disabled","disabled","_ref$readOnly","readOnly","_ref$required","required","error","prefix","postfix","onChange","onBlur","_ref$placeholderChar","placeholderChar","_ref$mask","mask","_ref$inside","inside","fullWidth","width","rest","_objectWithoutProperties","_excluded","parsedMask","length","match","map","token","inner","React","Form","_extends","accepter","MaskedInput","errorMessage","_isString","undefined","passRest","needsGroup","className","style","makeWidthStyle","RequiredIcon","InputGroup","lfLog"],"sourceRoot":""}