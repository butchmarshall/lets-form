{"version":3,"file":"616-251fe9abbc8d8fcde38a.js","mappings":"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","sources":["webpack:///./components/rsuite-field-control/index.js","webpack:///./react-rsuite5/input-mask/index.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nimport Whisper from 'rsuite/Whisper';\nimport Popover from 'rsuite/Popover';\n\nconst POPOVER_STYLE = {\n  padding: '6px',\n  color: '#ff6633'\n};\n\nconst RSuite5FieldControl = ({ errorMessage, children }) => {\n  const triggerRef = useRef();\n\n  useEffect(\n    () => {\n      if (errorMessage) {\n        triggerRef.current.open();\n      } else {\n        triggerRef.current.close();\n      }\n    },\n    [errorMessage]\n  );\n\n  return (\n    <Whisper\n      placement=\"bottomStart\"\n      ref={triggerRef}\n      trigger=\"none\"\n      speaker={<Popover \n        style={POPOVER_STYLE} \n        visible={!!errorMessage}\n        className=\"lf-react-rsuite5-error-popover\"\n      ><div>{errorMessage}</div></Popover>}\n    >{children}</Whisper>\n  );\n}\n\nexport { RSuite5FieldControl };\n","/* eslint-disable no-template-curly-in-string */\nimport React from 'react';\nimport Form from 'rsuite/Form';\nimport MaskedInput from 'rsuite/MaskedInput';\nimport InputGroup from 'rsuite/InputGroup';\nimport _ from 'lodash';\n\nimport { RequiredIcon, I18N } from '../../components';\nimport { RSuite5FieldControl } from '../../components/rsuite-field-control';\nimport { passRest, makeWidthStyle } from '../../helpers';\nimport { lfLog } from '../../helpers/lf-log';\n\nconst prepareMask = str => {\n  if (typeof str !== 'string' || str.length === 0) {\n    return [];\n  }\n\n  const matches = str.match(/\\$\\{[a-zA-Z0-9]\\}|.{1,1}/gm);\n\n  return matches\n    .map(token => {\n      if (token === '${d}') {\n        return /\\d/;\n      } else if (token === '${D}') {\n        return /\\D/;\n      } else if (token === '${a}') {\n        return /[a-zA-Z]/;\n      } else if (token === '${w}') {\n        return /[a-zA-Z0-9]/;\n      }\n\n      return token;\n    });\n};\n\nconst InputMask = I18N(\n  ({\n    name,\n    label,\n    hint,\n    value,\n    size,\n    placeholder,\n    tooltip = false,\n    disabled = false,\n    readOnly = false,\n    required = false,\n    error,\n    prefix,\n    postfix,\n    onChange,\n    onBlur,\n    placeholderChar = '_',\n    mask = [],\n    inside = false,\n    fullWidth,\n    width,\n    ...rest\n  }) => {\n    const parsedMask = prepareMask(mask);\n\n    const inner = (\n      <RSuite5FieldControl errorMessage={_.isString(error) ? error : undefined }>\n        <MaskedInput\n          name={name}\n          value={value}\n          onChange={onChange}\n          onBlur={onBlur}\n          disabled={disabled}\n          size={size}\n          placeholder={placeholder}\n          readOnly={readOnly}\n          placeholderChar={typeof placeholderChar === 'string' && placeholderChar.length > 0 ? placeholderChar[0] : '_'}\n          errorMessage={_.isString(error) ? error : undefined }\n          mask={parsedMask}\n          {...passRest(rest)}\n        />\n      </RSuite5FieldControl>\n    );\n\n    const needsGroup = postfix || prefix;\n\n    return (\n      <Form.Group \n        data-lf-field-name={name} \n        className=\"lf-control-input-mask\"\n        style={makeWidthStyle(fullWidth, width)}\n      >\n        {label && <Form.ControlLabel>\n          {label}\n          {hint && tooltip && <Form.HelpText tooltip>{hint}</Form.HelpText>}\n          {required && <RequiredIcon />}\n        </Form.ControlLabel>}\n        {!needsGroup && inner}\n        {needsGroup && (\n          <InputGroup inside={inside}>\n            {prefix && <InputGroup.Addon>{prefix}</InputGroup.Addon>}\n            {inner}\n            {postfix && <InputGroup.Addon>{postfix}</InputGroup.Addon>}\n          </InputGroup>\n        )}\n        {hint && !tooltip && <Form.HelpText>{hint}</Form.HelpText>}\n      </Form.Group>\n    );\n  },\n  ['label', 'hint', 'placeholder']\n);\nlfLog('Loaded RSuite5.InputMask');\n\nexport default InputMask;\n"],"names":["POPOVER_STYLE","padding","color","RSuite5FieldControl","_ref","errorMessage","children","triggerRef","useRef","useEffect","current","open","close","React","Whisper","placement","ref","trigger","speaker","Popover","style","visible","className","InputMask","I18N","str","name","label","hint","value","size","placeholder","_ref$tooltip","tooltip","_ref$disabled","disabled","_ref$readOnly","readOnly","_ref$required","required","error","prefix","postfix","onChange","onBlur","_ref$placeholderChar","placeholderChar","_ref$mask","mask","_ref$inside","inside","fullWidth","width","rest","_objectWithoutProperties","_excluded","parsedMask","length","match","map","token","inner","_isString","undefined","MaskedInput","_extends","passRest","needsGroup","Form","makeWidthStyle","RequiredIcon","InputGroup","lfLog"],"sourceRoot":""}